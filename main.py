import discord
from discord.ext import commands, tasks
from datetime import datetime
from discord.ui import Button, View
import pymongo

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Intents —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
intents = discord.Intents.all()

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–¥–µ—Å—å
TOKEN = 'MTI2NzYyNDEzMzQ4MzU2NTE5MA.GPFxpU.A0S3XJ6p6jaZzOaYVB9ggN4aBSFzNM2zQIL3Sg'
PREFIX = '!'
bot = commands.Bot(command_prefix=PREFIX, intents=intents)


@bot.event
async def on_ready():
    print(f'{bot.user.name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.command(name='—Ñ–æ—Ç–æ')
async def send_photo(ctx):
    url = 'https://cdn.discordapp.com/attachments/1269724684820156477/1295113454151143485/2.png'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL —Ñ–æ—Ç–æ

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    button_rules = Button(label='–ü—Ä–∞–≤–∏–ª–∞', style=discord.ButtonStyle.blurple, emoji='üìñ', url='https://docs.google.com/document/d/1CTi5oLFxoohfdWVomhIoFGXlyaaDzQxBhdU8aU4CdrU/edit')
    button_application = Button(label='–ó–∞—è–≤–∫–∞', style=discord.ButtonStyle.blurple, emoji='üìù', url='https://discord.com/channels/1176904118623813704/1286694636710137889')
    button_reglament = Button(label='–†–µ–≥–ª–∞–º–µ–Ω—Ç', style=discord.ButtonStyle.blurple, emoji='üìú', url='https://docs.google.com/document/d/1k3KMjKxXeGKxkwNoat-DSDfYiwXqDYvrbMDXySfunwg/edit')

    view = View()
    view.add_item(button_rules)
    view.add_item(button_application)
    view.add_item(button_reglament)

    await ctx.send(url, view=view)




import discord
from discord.ext import tasks

ROLE_NAMES = {
    "Medium RP": "üÖú Medium RP",
    "< NoRules >": "<:Norules:1295747370939842715> [NoRules]",
    "< Discord >": "<:Discord:1280031625316532304> [Discord]",
    "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä": "üÖö –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä",
    "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": "üá∑ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
}

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    channel = bot.get_channel(1286694636710137889)  # Replace with your channel ID
    await find_or_send_initial_message(channel)
    update_status.start(channel)

async def find_or_send_initial_message(channel):
    global status_message
    async for message in channel.history(limit=100):
        if message.author == bot.user and message.embeds and message.embeds[0].title == "–ó–∞—è–≤–∫–∏":
            status_message = message
            break
    else:
        status_message = await send_initial_message(channel)

async def send_initial_message(channel):
    embed = discord.Embed(title="–ó–∞—è–≤–∫–∏", color=discord.Color.blue())
    embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö", value=f"```\n–ó–∞—è–≤–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã, –∏–∑-–∑–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω:\n1. –£ –≤–∞—Å –Ω–µ—Ç—É 100 —á–∞—Å–æ–≤ –≤ SCP:Secret Laboratory.\n2. –£ –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Steam.\n3. –ù–µ –ø–æ–ª–Ω–∞—è –∑–∞—è–≤–∫–∞.\n4. –®—É—Ç–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞.\n5. –í–∞–º –Ω–µ—Ç—É 14 –ª–µ—Ç.\n6. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ Discord –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 3-—Ö –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥.\n–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:\n1. –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 3-—Ö –¥–Ω–µ–π -> –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n2. –ó–Ω–∞–∫–∏ üîì –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –æ—Ç–¥–µ–ª.\n\n‚Ä£ üîì - –ó–∞—è–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã.\n‚Ä£ üîí - –ó–∞—è–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã –∏ –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è.\n\n```", inline=False)

    for role_name, display_name in ROLE_NAMES.items():
        embed.add_field(name=display_name, value="[`00/10` - üîì]", inline=False)

    view = discord.ui.View()
    
    view.add_item(discord.ui.Button(label="Discord", style=discord.ButtonStyle.primary, emoji="<:Discord:1280031625316532304>", url="https://docs.google.com/forms/d/e/1FAIpQLSfIdPZKtC_WFqBEmWWepI0Btq3zGDENrGkE6tedzmFgnwVtQQ/viewform"))  # Replace with your URL

    return await channel.send(embed=embed, view=view)

@tasks.loop(minutes=1)
async def update_status(channel):
    guild = channel.guild
    embed = discord.Embed(title="–ó–∞—è–≤–∫–∏", color=discord.Color.blue())
    embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö", value=f"```\n–ó–∞—è–≤–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã, –∏–∑-–∑–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω:\n1. –£ –≤–∞—Å –Ω–µ—Ç—É 100 —á–∞—Å–æ–≤ –≤ SCP:Secret Laboratory.\n2. –£ –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Steam.\n3. –ù–µ –ø–æ–ª–Ω–∞—è –∑–∞—è–≤–∫–∞.\n4. –®—É—Ç–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞.\n5. –í–∞–º –Ω–µ—Ç—É 14 –ª–µ—Ç.\n6. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ Discord –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 3-—Ö –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥.\n–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:\n1. –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 3-—Ö –¥–Ω–µ–π -> –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n2. –ó–Ω–∞–∫–∏ üîì –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –æ—Ç–¥–µ–ª.```\n\n‚Ä£ üîì - –ó–∞—è–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã.\n‚Ä£ üîí - –ó–∞—è–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã –∏ –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è.\n\n„Ö§\n", inline=False)

    for role_name, display_name in ROLE_NAMES.items():
        role = discord.utils.get(guild.roles, name=role_name)
        if role:
            member_count = sum(1 for member in guild.members if role in member.roles)
              
            if role_name == "< Discord >":
                embed.add_field(name=display_name, value=f"**[`{member_count:02}/08`** - üîì]", inline=False)
            elif role_name == "< NoRules >":
                embed.add_field(name=display_name, value=f"**[`{member_count:02}/10`** - üîì]", inline=False)
           
                

    if status_message.author == bot.user:
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="Discord", style=discord.ButtonStyle.primary, emoji="<:Discord:1280031625316532304>", url="https://docs.google.com/forms/d/e/1FAIpQLSfIdPZKtC_WFqBEmWWepI0Btq3zGDENrGkE6tedzmFgnwVtQQ/viewform"))  # Replace with your URL
        view.add_item(discord.ui.Button(label="NoRules", style=discord.ButtonStyle.primary, emoji="<:Norules:1295747370939842715>", url="https://docs.google.com/forms/d/e/1FAIpQLScH51Kqe1FY4xeqjpoENZyP3oNEllZW2hs_WMM2CcQ-dvDkUw/viewform"))  # Replace with your URL
        await status_message.edit(embed=embed, view=view)




import discord
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
from pymongo import MongoClient
from datetime import datetime
import uuid
import pymongo

# MongoDB –∫–ª–∏–µ–Ω—Ç
mongo_client = MongoClient("mongodb+srv://discord_bot:01062010(Art@discord.5ojz8.mongodb.net/?retryWrites=true&w=majority&appName=discord")
db = mongo_client['discord_bot']
complaints_collection = db['complaints']

intents = discord.Intents.all()


ALLOWED_ROLES = [1208103496268910602, 1208103605127880704]  # ID —Ä–æ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º


class ComplaintModal(Modal):
    def __init__(self, author, message=None, complaint_id=None):
        super().__init__(title=f"–ñ–∞–ª–æ–±–∞ –æ—Ç {author.name}#{author.discriminator}")
        self.author = author
        self.message = message
        self.complaint_id = complaint_id

        existing_embed = message.embeds[0] if message else None
        self.add_item(TextInput(label="–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è", placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                                default=existing_embed.fields[0].value if existing_embed else ""))
        self.add_item(TextInput(label="–ù–∞—Ä—É—à–∏—Ç–µ–ª—å", placeholder="Discord —Ç–µ–≥ –∏–ª–∏ ID",
                                default=existing_embed.fields[1].value if existing_embed else ""))
        self.add_item(TextInput(label="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", style=discord.TextStyle.paragraph,
                                placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ",
                                default=existing_embed.fields[2].value if existing_embed else ""))
        self.add_item(TextInput(label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
                                default=existing_embed.fields[3].value if existing_embed else ""))

    async def on_submit(self, interaction: discord.Interaction):
        embed = self.message.embeds[0] if self.message else discord.Embed(color=discord.Color.blue())
        embed.clear_fields()
        embed.add_field(name="–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è", value=self.children[0].value, inline=False)
        embed.add_field(name="–ù–∞—Ä—É—à–∏—Ç–µ–ª—å", value=self.children[1].value, inline=False)
        embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", value=self.children[2].value, inline=False)
        embed.add_field(name="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", value=self.children[3].value, inline=False)

        if self.message:
            await self.message.edit(embed=embed)
        else:
            complaint_id = str(uuid.uuid4())
            embed.description = f"**–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç {interaction.user.mention}**"
            message = await interaction.channel.send(embed=embed, view=PersistentComplaintView(interaction.user, complaint_id))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            complaints_collection.insert_one({
                "complaint_id": complaint_id,
                "author_id": interaction.user.id,
                "channel_id": interaction.channel.id,
                "message_id": message.id,
                "embed_data": embed.to_dict(),
                "status": "new"
            })

        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)


class PersistentComplaintView(View):
    def __init__(self, author, complaint_id):
        super().__init__(timeout=None)
        self.author = author
        self.complaint_id = complaint_id
        self.add_item(EditButton(author, complaint_id))
        self.add_item(DeleteButton(author, complaint_id))
        self.add_item(ReviewButton(complaint_id))
        self.add_item(DecisionButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å", discord.ButtonStyle.success, "accept", complaint_id))
        self.add_item(DecisionButton("‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", discord.ButtonStyle.danger, "reject", complaint_id))


class EditButton(Button):
    def __init__(self, author, complaint_id):
        super().__init__(label="‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.primary, custom_id=f"edit_{complaint_id}")
        self.author = author
        self.complaint_id = complaint_id

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id == self.author.id:
            modal = ComplaintModal(self.author, interaction.message, self.complaint_id)
            await interaction.response.send_modal(modal)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class DeleteButton(Button):
    def __init__(self, author, complaint_id):
        super().__init__(label="üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id=f"delete_{complaint_id}")
        self.author = author
        self.complaint_id = complaint_id

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id == self.author.id or interaction.user.guild_permissions.administrator:
            complaints_collection.delete_one({"complaint_id": self.complaint_id})
            await interaction.message.delete()
            await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class ReviewButton(Button):
    def __init__(self, complaint_id):
        super().__init__(label="üí°–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", style=discord.ButtonStyle.secondary, custom_id=f"review_{complaint_id}")
        self.complaint_id = complaint_id

    async def callback(self, interaction: discord.Interaction):
        if not any(role.id in ALLOWED_ROLES for role in interaction.user.roles):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)
            return

        embed = interaction.message.embeds[0]
        embed.color = discord.Color.yellow()
        await interaction.message.edit(embed=embed)

        if not interaction.message.thread:
            thread = await interaction.message.create_thread(name="–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã")
            await thread.send("–≠—Ç–∞ –≤–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∂–∞–ª–æ–±—ã.")

        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", ephemeral=True)


class DecisionButton(Button):
    def __init__(self, label, style, action, complaint_id):
        super().__init__(label=label, style=style, custom_id=f"decision_{action}_{complaint_id}")
        self.action = action
        self.complaint_id = complaint_id

    async def callback(self, interaction: discord.Interaction):
        if not any(role.id in ALLOWED_ROLES for role in interaction.user.roles):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)
            return

        embed = interaction.message.embeds[0]
        decision_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        if self.action == "accept":
            embed.set_footer(text=f"–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω | {decision_time}")
            embed.color = discord.Color.green()
        elif self.action == "reject":
            embed.set_footer(text=f"–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ | {decision_time}")
            embed.color = discord.Color.red()

        complaints_collection.update_one({"complaint_id": self.complaint_id}, {"$set": {"status": self.action}})
        await interaction.message.edit(embed=embed)
        await interaction.response.send_message(
            f"–ñ–∞–ª–æ–±–∞ {'–ø—Ä–∏–Ω—è—Ç–∞' if self.action == 'accept' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.", ephemeral=True
        )


@bot.event
async def on_ready():
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for complaint in complaints_collection.find():
        channel = bot.get_channel(complaint["channel_id"])
        if channel:
            try:
                message = await channel.fetch_message(complaint["message_id"])
                view = PersistentComplaintView(
                    author=discord.Object(id=complaint["author_id"]),
                    complaint_id=complaint["complaint_id"]
                )
                await message.edit(view=view)
            except discord.NotFound:
                complaints_collection.delete_one({"complaint_id": complaint["complaint_id"]})

    print(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


@bot.command()
async def complaint(ctx):
    embed = discord.Embed(
        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É",
        description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É.",
        color=discord.Color.blue()
    )

    view = View(timeout=None)
    button = Button(label="‚úçÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", style=discord.ButtonStyle.primary, custom_id="send_complaint")

    async def button_callback(interaction: discord.Interaction):
        modal = ComplaintModal(interaction.user)
        await interaction.response.send_modal(modal)

    button.callback = button_callback
    view.add_item(button)

    await ctx.send(embed=embed, view=view)



import discord
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
from datetime import datetime

intents = discord.Intents.all()
intents.messages = True


ALLOWED_ROLES = [1273052608680038461]  # ID —Ä–æ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º


class SCPComplaintModal(Modal):
    def __init__(self, author, message=None):
        super().__init__(title=f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç {author.name}#{author.discriminator}")
        self.author = author
        self.message = message

        existing_embed = message.embeds[0] if message else None
        self.add_item(TextInput(label="–°–µ—Ä–≤–µ—Ä", placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
                                default=existing_embed.fields[0].value if existing_embed else ""))
        self.add_item(TextInput(label="–ù–∞—Ä—É—à–∏—Ç–µ–ª—å", placeholder="Discord —Ç–µ–≥, SteamID –∏–ª–∏ –Ω–∏–∫",
                                default=existing_embed.fields[1].value if existing_embed else ""))
        self.add_item(TextInput(label="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", style=discord.TextStyle.paragraph,
                                placeholder="–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",
                                default=existing_embed.fields[2].value if existing_embed else ""))
        self.add_item(TextInput(label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", placeholder="–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –≤–∏–¥–µ–æ –∏–ª–∏ –ª–æ–≥–∏",
                                default=existing_embed.fields[3].value if existing_embed else ""))

    async def on_submit(self, interaction: discord.Interaction):
        embed = self.message.embeds[0] if self.message else discord.Embed(color=discord.Color.blue())
        embed.clear_fields()
        embed.add_field(name="–°–µ—Ä–≤–µ—Ä", value=self.children[0].value, inline=False)
        embed.add_field(name="–ù–∞—Ä—É—à–∏—Ç–µ–ª—å", value=self.children[1].value, inline=False)
        embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", value=self.children[2].value, inline=False)
        embed.add_field(name="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", value=self.children[3].value, inline=False)

        if self.message:
            await self.message.edit(embed=embed)
        else:
            embed.description = f"**–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç {interaction.user.mention}**"
            self.message = await interaction.channel.send(embed=embed, view=SCPPersistentComplaintView(self.author))

        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)


class SCPPersistentComplaintView(View):
    def __init__(self, author):
        super().__init__(timeout=None)
        self.author = author
        self.add_item(SCPEditButton(author))
        self.add_item(SCPDeleteButton(author))
        self.add_item(SCPReviewButton())
        self.add_item(SCPDecisionButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å", discord.ButtonStyle.success, "accept", self))
        self.add_item(SCPDecisionButton("‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", discord.ButtonStyle.danger, "reject", self))


class SCPEditButton(Button):
    def __init__(self, author):
        super().__init__(label="‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.primary, custom_id="scp_edit_button")
        self.author = author

    async def callback(self, interaction: discord.Interaction):
        if interaction.user == self.author:
            modal = SCPComplaintModal(self.author, interaction.message)
            await interaction.response.send_modal(modal)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class SCPDeleteButton(Button):
    def __init__(self, author):
        super().__init__(label="üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="scp_delete_button")
        self.author = author

    async def callback(self, interaction: discord.Interaction):
        if interaction.user == self.author or interaction.user.guild_permissions.administrator:
            await interaction.message.delete()
            await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class SCPReviewButton(Button):
    def __init__(self):
        super().__init__(label="üí°–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", style=discord.ButtonStyle.secondary, custom_id="scp_review_button")

    async def callback(self, interaction: discord.Interaction):
        if not any(role.id in ALLOWED_ROLES for role in interaction.user.roles):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)
            return

        embed = interaction.message.embeds[0]
        embed.color = discord.Color.yellow()
        await interaction.message.edit(embed=embed)

        if not interaction.message.thread:
            thread = await interaction.message.create_thread(name="–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ –∏–≥—Ä–æ–∫–∞")
            await thread.send("–≠—Ç–∞ –≤–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∂–∞–ª–æ–±—ã.")

        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", ephemeral=True)


class SCPDecisionButton(Button):
    def __init__(self, label, style, action, parent_view):
        super().__init__(label=label, style=style, custom_id=f"scp_decision_{action}")
        self.action = action
        self.parent_view = parent_view

    async def callback(self, interaction: discord.Interaction):
        if not any(role.id in ALLOWED_ROLES for role in interaction.user.roles):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)
            return

        embed = interaction.message.embeds[0]
        decision_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        if self.action == "accept":
            embed.set_footer(text=f"–ò–≥—Ä–æ–∫ –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω | {decision_time}")
            embed.color = discord.Color.green()
        elif self.action == "reject":
            embed.set_footer(text=f"–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ | {decision_time}")
            embed.color = discord.Color.red()

        embed.add_field(name="–ñ–∞–ª–æ–±—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª", value=f"{interaction.user.mention}")

        for item in self.parent_view.children:
            item.disabled = True

        await interaction.message.edit(embed=embed, view=self.parent_view)
        await interaction.response.send_message(
            f"–ñ–∞–ª–æ–±–∞ {'–ø—Ä–∏–Ω—è—Ç–∞' if self.action == 'accept' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.", ephemeral=True
        )


@bot.command()
async def scp_complaint(ctx):
    embed = discord.Embed(
        title="–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞ SCP: Secret Laboratory",
        description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∏–≥—Ä–æ–∫–∞.",
        color=discord.Color.blue()
    )

    view = View(timeout=None)
    button = Button(label="‚úçÔ∏è–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", style=discord.ButtonStyle.primary, custom_id="scp_send_complaint")

    async def button_callback(interaction: discord.Interaction):
        modal = SCPComplaintModal(interaction.user)
        await interaction.response.send_modal(modal)

    button.callback = button_callback
    view.add_item(button)

    await ctx.send(embed=embed, view=view)




import discord
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
from datetime import datetime

intents = discord.Intents.all()
intents.messages = True



class DonatorComplaintModal(Modal):
    def __init__(self, author, message=None):
        super().__init__(title=f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –¥–æ–Ω–∞—Ç–æ—Ä–∞ –æ—Ç {author.name}#{author.discriminator}")
        self.author = author
        self.message = message

        existing_embed = message.embeds[0] if message else None
        self.add_item(TextInput(label="–ú–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
                                default=existing_embed.fields[0].value if existing_embed else ""))
        self.add_item(TextInput(label="–ù–∞—Ä—É—à–∏—Ç–µ–ª—å", placeholder="–ù–∏–∫–Ω–µ–π–º (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ SteamID64)",
                                default=existing_embed.fields[1].value if existing_embed else ""))
        self.add_item(TextInput(label="–ß—Ç–æ –±—ã–ª–æ –Ω–∞—Ä—É—à–µ–Ω–æ", placeholder="–ù–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
                                default=existing_embed.fields[2].value if existing_embed else ""))
        self.add_item(TextInput(label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", placeholder="–ù–∞–ª–∏—á–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
                                default=existing_embed.fields[3].value if existing_embed else ""))

    async def on_submit(self, interaction: discord.Interaction):
        embed = self.message.embeds[0] if self.message else discord.Embed(color=discord.Color.blue())
        embed.clear_fields()
        embed.add_field(name="–ú–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", value=self.children[0].value, inline=False)
        embed.add_field(name="–ù–∞—Ä—É—à–∏—Ç–µ–ª—å", value=self.children[1].value, inline=False)
        embed.add_field(name="–ß—Ç–æ –±—ã–ª–æ –Ω–∞—Ä—É—à–µ–Ω–æ", value=self.children[2].value, inline=False)
        embed.add_field(name="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", value=self.children[3].value, inline=False)

        if self.message:
            await self.message.edit(embed=embed)
        else:
            embed.description = f"**–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ–Ω–∞—Ç–æ—Ä–∞ –æ—Ç {interaction.user.mention}**"
            self.message = await interaction.channel.send(embed=embed, view=DonatorPersistentComplaintView(self.author))

        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)


class DonatorPersistentComplaintView(View):
    def __init__(self, author):
        super().__init__(timeout=None)
        self.author = author
        self.add_item(DonatorEditButton(author))
        self.add_item(DonatorDeleteButton(author))
        self.add_item(DonatorReviewButton())
        self.add_item(DonatorDecisionButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å", discord.ButtonStyle.success, "accept", self))
        self.add_item(DonatorDecisionButton("‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", discord.ButtonStyle.danger, "reject", self))


class DonatorEditButton(Button):
    def __init__(self, author):
        super().__init__(label="‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.primary, custom_id="donator_edit_button")
        self.author = author

    async def callback(self, interaction: discord.Interaction):
        if interaction.user == self.author:
            modal = DonatorComplaintModal(self.author, interaction.message)
            await interaction.response.send_modal(modal)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class DonatorDeleteButton(Button):
    def __init__(self, author):
        super().__init__(label="üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="donator_delete_button")
        self.author = author

    async def callback(self, interaction: discord.Interaction):
        if interaction.user == self.author or interaction.user.guild_permissions.administrator:
            await interaction.message.delete()
            await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class DonatorReviewButton(Button):
    def __init__(self):
        super().__init__(label="üí°–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", style=discord.ButtonStyle.secondary, custom_id="donator_review_button")

    async def callback(self, interaction: discord.Interaction):
        embed = interaction.message.embeds[0]
        embed.color = discord.Color.yellow()
        await interaction.message.edit(embed=embed)

        if not interaction.message.thread:
            thread = await interaction.message.create_thread(name="–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ –¥–æ–Ω–∞—Ç–æ—Ä–∞")
            await thread.send("–≠—Ç–∞ –≤–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∂–∞–ª–æ–±—ã.")

        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", ephemeral=True)


class DonatorDecisionButton(Button):
    def __init__(self, label, style, action, parent_view):
        super().__init__(label=label, style=style, custom_id=f"donator_decision_{action}")
        self.action = action
        self.parent_view = parent_view

    async def callback(self, interaction: discord.Interaction):
        embed = interaction.message.embeds[0]
        decision_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        if self.action == "accept":
            embed.set_footer(text=f"–î–æ–Ω–∞—Ç–æ—Ä –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω | {decision_time}")
            embed.color = discord.Color.green()
        elif self.action == "reject":
            embed.set_footer(text=f"–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ | {decision_time}")
            embed.color = discord.Color.red()

        embed.add_field(name="–ñ–∞–ª–æ–±—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª", value=f"{interaction.user.mention}")

        for item in self.parent_view.children:
            item.disabled = True

        await interaction.message.edit(embed=embed, view=self.parent_view)
        await interaction.response.send_message(
            f"–ñ–∞–ª–æ–±–∞ {'–ø—Ä–∏–Ω—è—Ç–∞' if self.action == 'accept' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.", ephemeral=True
        )


@bot.command()
async def donator_complaint(ctx):
    embed = discord.Embed(
        title="–ñ–∞–ª–æ–±–∞ –Ω–∞ –¥–æ–Ω–∞—Ç–æ—Ä–∞",
        description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –¥–æ–Ω–∞—Ç–æ—Ä–∞.",
        color=discord.Color.blue()
    )

    view = View(timeout=None)
    button = Button(label="‚úçÔ∏è–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", style=discord.ButtonStyle.primary, custom_id="donator_send_complaint")

    async def button_callback(interaction: discord.Interaction):
        modal = DonatorComplaintModal(interaction.user)
        await interaction.response.send_modal(modal)

    button.callback = button_callback
    view.add_item(button)

    await ctx.send(embed=embed, view=view)


import discord
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
from datetime import datetime

intents = discord.Intents.all()
intents.messages = True

ALLOWED_ROLES = [1273053207148626012, 1208093749666644038]  # ID —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∂–∞–ª–æ–±–∞–º–∏


class LeadershipComplaintModal(Modal):
    def __init__(self, author, message=None):
        super().__init__(title=f"–ñ–∞–ª–æ–±–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ—Ç {author.name}#{author.discriminator}")
        self.author = author
        self.message = message

        existing_embed = message.embeds[0] if message else None
        self.add_item(TextInput(label="–ú–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –∫–∞–Ω–∞–ª",
                                default=existing_embed.fields[0].value if existing_embed else ""))
        self.add_item(TextInput(label="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", placeholder="–ò–º—è, —Ç–µ–≥ –∏–ª–∏ ID",
                                default=existing_embed.fields[1].value if existing_embed else ""))
        self.add_item(TextInput(label="–°—É—Ç—å –∂–∞–ª–æ–±—ã", style=discord.TextStyle.paragraph,
                                placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ",
                                default=existing_embed.fields[2].value if existing_embed else ""))
        self.add_item(TextInput(label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", placeholder="–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –≤–∏–¥–µ–æ",
                                default=existing_embed.fields[3].value if existing_embed else ""))

    async def on_submit(self, interaction: discord.Interaction):
        embed = self.message.embeds[0] if self.message else discord.Embed(color=discord.Color.blue())
        embed.clear_fields()
        embed.add_field(name="–ú–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", value=self.children[0].value, inline=False)
        embed.add_field(name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", value=self.children[1].value, inline=False)
        embed.add_field(name="–°—É—Ç—å –∂–∞–ª–æ–±—ã", value=self.children[2].value, inline=False)
        embed.add_field(name="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", value=self.children[3].value, inline=False)

        if self.message:
            await self.message.edit(embed=embed)
        else:
            embed.description = f"**–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ—Ç {interaction.user.mention}**"
            self.message = await interaction.channel.send(embed=embed, view=LeadershipPersistentComplaintView())

        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)


class LeadershipPersistentComplaintView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(LeadershipEditButton())
        self.add_item(LeadershipDeleteButton())
        self.add_item(LeadershipReviewButton())
        self.add_item(LeadershipDecisionButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å", discord.ButtonStyle.success, "accept", self))
        self.add_item(LeadershipDecisionButton("‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", discord.ButtonStyle.danger, "reject", self))


class LeadershipEditButton(Button):
    def __init__(self):
        super().__init__(label="‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.primary, custom_id="leadership_edit_button")

    async def callback(self, interaction: discord.Interaction):
        modal = LeadershipComplaintModal(interaction.user, interaction.message)
        await interaction.response.send_modal(modal)


class LeadershipDeleteButton(Button):
    def __init__(self):
        super().__init__(label="üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="leadership_delete_button")

    async def callback(self, interaction: discord.Interaction):
        if any(role.id in ALLOWED_ROLES for role in interaction.user.roles):
            await interaction.message.delete()
            await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class LeadershipReviewButton(Button):
    def __init__(self):
        super().__init__(label="üí°–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", style=discord.ButtonStyle.secondary, custom_id="leadership_review_button")

    async def callback(self, interaction: discord.Interaction):
        if any(role.id in ALLOWED_ROLES for role in interaction.user.roles):
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.yellow()
            await interaction.message.edit(embed=embed)

            if not interaction.message.thread:
                thread = await interaction.message.create_thread(name="–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
                await thread.send("–≠—Ç–∞ –≤–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∂–∞–ª–æ–±—ã.")

            await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —ç—Ç–æ–π –∂–∞–ª–æ–±—ã.", ephemeral=True)


class LeadershipDecisionButton(Button):
    def __init__(self, label, style, action, parent_view):
        super().__init__(label=label, style=style, custom_id=f"leadership_decision_{action}")
        self.action = action
        self.parent_view = parent_view

    async def callback(self, interaction: discord.Interaction):
        if any(role.id in ALLOWED_ROLES for role in interaction.user.roles):
            embed = interaction.message.embeds[0]
            decision_time = datetime.now().strftime("%d.%m.%Y %H:%M")

            if self.action == "accept":
                embed.set_footer(text=f"–ñ–∞–ª–æ–±–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ | {decision_time}")
                embed.color = discord.Color.green()
            elif self.action == "reject":
                embed.set_footer(text=f"–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ | {decision_time}")
                embed.color = discord.Color.red()

            embed.add_field(name="–ñ–∞–ª–æ–±—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª", value=f"{interaction.user.mention}")

            for item in self.parent_view.children:
                item.disabled = True

            await interaction.message.edit(embed=embed, view=self.parent_view)
            await interaction.response.send_message(
                f"–ñ–∞–ª–æ–±–∞ {'–ø—Ä–∏–Ω—è—Ç–∞' if self.action == 'accept' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.", ephemeral=True
            )
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)


@bot.command()
async def leadership_complaint(ctx):
    embed = discord.Embed(
        title="–ñ–∞–ª–æ–±–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
        description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.",
        color=discord.Color.blue()
    )

    view = View(timeout=None)
    button = Button(label="‚úçÔ∏è–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", style=discord.ButtonStyle.primary, custom_id="leadership_send_complaint")

    async def button_callback(interaction: discord.Interaction):
        modal = LeadershipComplaintModal(interaction.user)
        await interaction.response.send_modal(modal)

    button.callback = button_callback
    view.add_item(button)

    await ctx.send(embed=embed, view=view)





# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN)

